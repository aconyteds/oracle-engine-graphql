// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// System data

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  googleAccountId String     @unique
  email           String?    @unique
  name            String?
  threads         Thread[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  // This indicates that the user is authorized to use the tool
  active          Boolean    @default(false)
  // The last campaign the user loaded
  lastCampaignId  String?    @db.ObjectId // Stores the last loaded campaign
  Campaign        Campaign[] // One-to-many relationship with Campaign
}

model Thread {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @db.ObjectId
  selectedAgent String
}

// This is a type to manage all of the events that the AI took when generating a message.
// This will keep track of reasoning, chain of though, tool calls, and tool results
type MessageWorkspace {
  // The type of event that occurred
  messageType String
  // The data associated with the event
  content     String
  // The timestamp when the event occurred
  timestamp   DateTime @default(now())
  // The elapsed time, if available
  elapsedTime Float?
}

model Message {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  role            String
  tokenCount      Int
  content         String
  workspace       MessageWorkspace[]
  thread          Thread             @relation(fields: [threadId], references: [id])
  threadId        String             @db.ObjectId
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  runId           String? // UUID to trace the LLM call in LangSmith
  routingMetadata Json? // Store routing decision and performance data per message
}

// RPG data

model Campaign {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  ownerId       String          @db.ObjectId
  name          String
  setting       String
  tone          String
  ruleset       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CampaignAsset CampaignAsset[]
  SessionEvent  SessionEvent[]
  user          User            @relation(fields: [ownerId], references: [id])

  @@unique([ownerId, name])
  @@index([ownerId])
}

enum RecordType {
  NPC
  Location
  Plot
  SessionEvent
}

model CampaignAsset {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  campaignId     String        @db.ObjectId
  campaign       Campaign      @relation(fields: [campaignId], references: [id])
  name           String
  recordType     RecordType
  summary        String? // Used for Quick linking to populate popover text for the Asset
  playerSummary  String? // Used for player friendly quick linking to populate popover text using only player knowledge
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Embeddings     Float[] // Used for Vector Search
  locationData   LocationData?
  plotData       Plot?
  npcData        NPC?
  SessionEvent   SessionEvent? @relation(fields: [sessionEventId], references: [id])
  sessionEventId String?       @db.ObjectId

  @@index([name])
  @@index([campaignId, recordType])
}

type LocationData {
  imageUrl          String
  description       String
  condition         String
  pointsOfInterest  String
  characters        String
  dmNotes           String
  sharedWithPlayers String
}

enum PlotStatus {
  Unknown
  Rumored
  InProgress
  WillNotDo
  Closed
}

enum Urgency {
  Ongoing
  TimeSensitive
  Critical
  Resolved
}

type Plot {
  summary          String
  status           PlotStatus
  urgency          Urgency
  relatedAssetList String[]           @db.ObjectId
  relatedAssets    PlotRelationship[]
}

type PlotRelationship {
  relatedAssetId      String @db.ObjectId
  relationshipSummary String
}

type NPC {
  imageUrl            String
  physicalDescription String
  motivation          String
  mannerisms          String
  dmNotes             String
  sharedWithPlayers   String
}

model SessionEvent {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  campaignId       String          @db.ObjectId
  campaign         Campaign        @relation(fields: [campaignId], references: [id])
  summary          String
  relatedAssetList String[]        @db.ObjectId
  relatedAssets    CampaignAsset[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// Rule data - Post MVP

// enum RuleType {
//   Core
//   Supplemental
//   Homebrew
// }

// enum RuleCategory {
//   CharacterCreation
//   Combat
//   Exploration
//   Magic
//   Social
//   Crafting
//   Downtime
//   GMTools
// }

// enum GameSystem {
//   DnD5e
//   WorldOfDarkness
// }

// model Rule {
//   id           String       @id @default(auto()) @map("_id") @db.ObjectId
//   // The content chunk for this rule
//   content      String
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
//   ruleType     RuleType
//   ruleCategory RuleCategory
//   gameSystem   GameSystem
//   // Includes details of where the rule is from, page it can be found on, etc.
//   metadata     Json?
//   embeddings   Float[] // Used for Vector Search

//   // Used for filtering and searching
//   @@index([ruleType])
//   @@index([ruleCategory])
//   @@index([gameSystem])
// }
