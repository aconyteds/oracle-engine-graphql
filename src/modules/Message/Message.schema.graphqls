extend type Mutation {
  createMessage(input: CreateMessageInput!): CreateMessagePayload
}

enum Role {
  User
  Assistant
  System
}

input CreateMessageInput {
  # Provide the ID of the thread to which the message belongs, if not provided a new thread will be created
  threadId: ID
  # The content of the message, this will be used when generating a response
  content: String!
}

type CreateMessagePayload {
  # The Thread ID that was passed in the input or created
  threadId: ID!
  # The message that was created
  message: Message!
}

type MessageWorkspace {
  messageType: String!
  content: String!
  timestamp: DateTime!
  elapsedTime: Float
}

type Message {
  id: ID!
  threadId: ID!
  content: String!
  createdAt: DateTime!
  role: Role!
  tokenCount: Int!
  workspace: [MessageWorkspace!]!
}
