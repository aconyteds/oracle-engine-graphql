extend type Mutation {
  createMessage(input: CreateMessageInput!): Message
}

extend type Subscription {
  messageCreated(
    input: MessageCreatedSubscriptionInput
  ): MessageCreatedSubscriptionPayload
}

input MessageCreatedSubscriptionInput {
  threadId: ID!
}

type MessageCreatedSubscriptionPayload {
  message: Message
}

enum Role {
  User
  Assistant
  System
}

input CreateMessageInput {
  # Provide the ID of the thread to which the message belongs, if not provided a new thread will be created
  threadId: ID
  # The content of the message, this will be used when generating a response
  content: String!
}

type Message {
  id: ID!
  threadId: ID!
  userId: ID!
  content: String!
  createdAt: DateTime!
  role: Role!
  tokenCount: Int!
}
