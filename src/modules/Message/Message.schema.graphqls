extend type Mutation {
  createMessage(input: CreateMessageInput!): CreateMessagePayload
  generateThread(input: GenerateThreadInput!): GenerateThreadPayload
}

enum Role {
  User
  Assistant
  System
}

input CreateMessageInput {
  # Provide the ID of the thread to which the message belongs, if not provided a new thread will be created
  threadId: ID
  # The content of the message, this will be used when generating a response
  content: String!
}

type CreateMessagePayload {
  # The Thread ID that was passed in the input or created
  threadId: ID!
  # The message that was created
  message: Message!
}

input GenerateThreadInput {
  # The ID of the thread to be initiated
  threadId: ID!
}

type GenerateThreadPayload {
  # The Thread ID that was passed in the input
  threadId: ID!
  # Whether or not the thread was already initiated
  alreadyInitiated: Boolean!
  # The URL to which the SSE connection should be made
  url: String!
}

type Message {
  id: ID!
  threadId: ID!
  content: String!
  createdAt: DateTime!
  role: Role!
  tokenCount: Int!
}
